{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "86509da3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import libraries\n",
    "import markov_clustering as mcl\n",
    "import networkx as nx\n",
    "import pandas as pd\n",
    "from collections import Counter\n",
    "from tqdm import tqdm\n",
    "import pyarrow as pa\n",
    "import pyarrow.parquet as pq\n",
    "\n",
    "from networkx.algorithms.community import greedy_modularity_communities\n",
    "from networkx import edge_betweenness_centrality as betweenness\n",
    "from networkx.algorithms.community.centrality import girvan_newman\n",
    "import itertools"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e76c53ba",
   "metadata": {},
   "outputs": [],
   "source": [
    "df5 = pd.read_parquet('df5_latest_v5.parquet',engine='pyarrow')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "a677fc9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Style-Fabric-Color (code)_x</th>\n",
       "      <th>Style-Fabric-Color (code)_y</th>\n",
       "      <th>Jaccard</th>\n",
       "      <th>mc_cluster_x</th>\n",
       "      <th>cluster_size_x</th>\n",
       "      <th>mc_cluster_y</th>\n",
       "      <th>cluster_size_y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>A79448-A225588-A7008</td>\n",
       "      <td>A81722-A229950-A7205</td>\n",
       "      <td>0.021739</td>\n",
       "      <td>3764</td>\n",
       "      <td>5</td>\n",
       "      <td>109</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>AUD01039-A232741-A1008</td>\n",
       "      <td>A81722-A229950-A7205</td>\n",
       "      <td>0.002646</td>\n",
       "      <td>2204</td>\n",
       "      <td>5</td>\n",
       "      <td>109</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>AUD01039-A232741-A1008</td>\n",
       "      <td>A81722-A229950-A7205</td>\n",
       "      <td>0.002646</td>\n",
       "      <td>2204</td>\n",
       "      <td>5</td>\n",
       "      <td>109</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>AU10026-AC00059-A80G</td>\n",
       "      <td>A81722-A229950-A7205</td>\n",
       "      <td>0.002058</td>\n",
       "      <td>3790</td>\n",
       "      <td>3</td>\n",
       "      <td>109</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>V800683S-VJ00366-V7008</td>\n",
       "      <td>A81722-A229950-A7205</td>\n",
       "      <td>0.009524</td>\n",
       "      <td>435</td>\n",
       "      <td>3</td>\n",
       "      <td>109</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27861811</th>\n",
       "      <td>EB2HWA729-E11620-E003</td>\n",
       "      <td>EE0YWASF6-E71960-EM53</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>3270</td>\n",
       "      <td>2</td>\n",
       "      <td>3270</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27861812</th>\n",
       "      <td>1000424-1A01388-5P030</td>\n",
       "      <td>1000205-1A00328-2B150</td>\n",
       "      <td>0.250000</td>\n",
       "      <td>5047</td>\n",
       "      <td>2</td>\n",
       "      <td>5047</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27861813</th>\n",
       "      <td>N25814-N403651-N1211</td>\n",
       "      <td>ZPL14001-ZWSM0003-Z4001</td>\n",
       "      <td>0.166667</td>\n",
       "      <td>5699</td>\n",
       "      <td>2</td>\n",
       "      <td>5699</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27861814</th>\n",
       "      <td>A74192-A216622-A1363</td>\n",
       "      <td>A72158-A213311-A1001</td>\n",
       "      <td>0.125000</td>\n",
       "      <td>4828</td>\n",
       "      <td>2</td>\n",
       "      <td>4828</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27861815</th>\n",
       "      <td>IST6001-IT00788-I497</td>\n",
       "      <td>EB4HNB834-E55041-E624</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4902</td>\n",
       "      <td>2</td>\n",
       "      <td>4902</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>27861816 rows Ã— 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         Style-Fabric-Color (code)_x Style-Fabric-Color (code)_y   Jaccard  \\\n",
       "0               A79448-A225588-A7008        A81722-A229950-A7205  0.021739   \n",
       "1             AUD01039-A232741-A1008        A81722-A229950-A7205  0.002646   \n",
       "2             AUD01039-A232741-A1008        A81722-A229950-A7205  0.002646   \n",
       "3               AU10026-AC00059-A80G        A81722-A229950-A7205  0.002058   \n",
       "4             V800683S-VJ00366-V7008        A81722-A229950-A7205  0.009524   \n",
       "...                              ...                         ...       ...   \n",
       "27861811       EB2HWA729-E11620-E003       EE0YWASF6-E71960-EM53  0.166667   \n",
       "27861812       1000424-1A01388-5P030       1000205-1A00328-2B150  0.250000   \n",
       "27861813        N25814-N403651-N1211     ZPL14001-ZWSM0003-Z4001  0.166667   \n",
       "27861814        A74192-A216622-A1363        A72158-A213311-A1001  0.125000   \n",
       "27861815        IST6001-IT00788-I497       EB4HNB834-E55041-E624  1.000000   \n",
       "\n",
       "          mc_cluster_x  cluster_size_x  mc_cluster_y  cluster_size_y  \n",
       "0                 3764               5           109              12  \n",
       "1                 2204               5           109              12  \n",
       "2                 2204               5           109              12  \n",
       "3                 3790               3           109              12  \n",
       "4                  435               3           109              12  \n",
       "...                ...             ...           ...             ...  \n",
       "27861811          3270               2          3270               2  \n",
       "27861812          5047               2          5047               2  \n",
       "27861813          5699               2          5699               2  \n",
       "27861814          4828               2          4828               2  \n",
       "27861815          4902               2          4902               2  \n",
       "\n",
       "[27861816 rows x 7 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a142e37c",
   "metadata": {},
   "outputs": [],
   "source": [
    "count=0\n",
    "\n",
    "while df5['mc_cluster_x'].nunique() > 15 and count <10:\n",
    "            \n",
    "    #Repeat groupby to reflect changes to clusters\n",
    "    df6=df5.groupby(by= ['mc_cluster_x', 'mc_cluster_y',\n",
    "                         'cluster_size_x','cluster_size_y']).agg({\"Jaccard\" : \"mean\"}).reset_index().sort_values(by=['cluster_size_x','Jaccard','cluster_size_y'], ascending=[True,False,True])\n",
    "    \n",
    "    if df6['mc_cluster_x'].iloc[0]!=df6['mc_cluster_y'].iloc[0]:\n",
    "        \n",
    "        #New cluster ID - changing the cluster ID of x in df5 to the top mc_cluster_y in df6\n",
    "        df5.loc[df5['mc_cluster_x']==df6['mc_cluster_x'].iloc[0],'mc_cluster_x']=df6['mc_cluster_y'].iloc[0]\n",
    "        \n",
    "        #Reassigning cluster_size_x in df5 - as we're merging it with the top entry for cluster_size_y in df6   \n",
    "        df5.loc[df5['mc_cluster_x']==df6['mc_cluster_y'].iloc[0],'cluster_size_x']=df6['cluster_size_x'].iloc[0]+df6['cluster_size_y'].iloc[0]\n",
    "        \n",
    "        #Replace corresponding cluster_size_y in df5 where we've changed the size\n",
    "        df5.loc[df5['mc_cluster_y']==df6['mc_cluster_y'].iloc[0],'cluster_size_y']=df6['cluster_size_x'].iloc[0]+df6['cluster_size_y'].iloc[0]\n",
    "        \n",
    "        count+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "39459a88",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4742\n"
     ]
    }
   ],
   "source": [
    "#see number of clusters we get\n",
    "print(df5['mc_cluster_x'].nunique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71636d7d",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Export the dataframe after the loop for the fifth time and read\n",
    "pq.write_table(pa.Table.from_pandas(df5),'df5_latest_v6.parquet')\n",
    "df5 = pd.read_parquet('df5_latest_v6.parquet',engine='pyarrow')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
